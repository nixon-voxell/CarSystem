FUNCTION join_util(join_list, join_str)
BEGIN
  IF join_list[0] != "" THEN
    RETURN join_str.join(join_list)
  ELSE
    RETURN join_list[1]
  ENDIF
END

FUNCTION get_user_int(prompt_msg)
BEGIN
  usr_input = ""
  DOWHILE NOT usr_input.isdigit()
    DISPLAY prompt_msg
    READ usr_input
    IF NOT usr_input.isdigit() THEN
      DISPLAY "Input is NOT an integer\nPlease try again\n"
    ENDIF
  ENDWHILE
  RETURN int(usr_input)
END

FUNCTION get_user_float(prompt_msg)
BEGIN
  usr_input = ""
  DOWHILE NOT usr_input.replace(".", "", 1).isdigit()
    DISPLAY prompt_msg
    READ usr_input
    IF NOT usr_input.replace(".", "", 1).isdigit() THEN
      DISPLAY("Input is not a number\nPlease try again\n")
    ENDIF
  ENDWHILE
  RETURN float(usr_input)
END

FUNCTION get_user_not_empty(prompt_msg, error_msg="Input cannot be empty\n")
BEGIN
  usr_input = ""
  DOWHILE usr_input == ""
    DISPLAY prompt_msg
    READ usr_input
    IF usr_input == "" THEN
      DISPLAY error_msg
    ENDIF
  ENDWHILE
  RETURN usr_input
END

FUNCTION get_user_selection(prompt_msg, selections, error_msg="Input is NOT within selection given\n")
BEGIN
  usr_input = ""
  DOWHILE usr_input NOT IN selections
    DISPLAY prompt_msg
    READ usr_input
    IF usr_input NOT IN selections THEN
      DISPLAY error_msg
    ENDIF
  ENDWHILE
  RETURN usr_input
END

FUNCTION get_user_int_range(prompt_msg, range_min, range_max, exceed_range_error_msg="Input has exceed the range given!\n")
BEGIN
  usr_int = range_min - 1
  DOWHILE usr_int < range_min or usr_int > range_max
    usr_int = get_user_int(prompt_msg)
    IF usr_int < range_min or usr_int > range_max THEN
      DISPLAY exceed_range_error_msg
    ENDIF
  ENDWHILE
  RETURN usr_int
END

FUNCTION get_file_info(filename) 
BEGIN
  WITH open(filename, "r", encoding="utf-8") AS file
    file_content = file.read()
  lines = file_content.split("\n")

  content1 = []
  content2 = []

  LOOP line_idx FROM 0 TO len(lines) - 1
    IF line_idx % 2 == 0 THEN
      content1.append(lines[line_idx])
    ELSE
      content2.append(lines[line_idx])
    ENDIF
  ENDLOOP
  RETURN content1, content2
END

FUNCTION modify_file_info(filename, location, is_content1, info)
BEGIN
  content1, content2 = get_file_info(filename)

  IF is_content1 THEN content1[location] = info
  ELSE content2[location] = info
  ENDIF

  final_string = ""
  LOOP content_idx FROM 0 TO len(content1)
    final_string += content1[content_idx] + "\n"
    final_string += content2[content_idx] + "\n"
  ENDLOOP

  WITH open(filename, "w") AS file
    file.write(final_string)

FUNCTION delete_file_info(filename, location)
BEGIN
  content1, content2 = get_file_info(filename)

  final_string = ""

  LOOP content_idx FROM 0 TO len(content1)

    IF (content_idx != location) THEN
      final_string += content1[content_idx] + "\n"
      final_string += content2[content_idx] + "\n"
    ENDIF

  WITH open(filename, "w") AS file
    file.write(final_string)
END

FUNCTION add_file_info(filename, new_content1, new_content2)
BEGIN
  WITH open(filename, "a") AS file
    file.write(new_content1)
    file.write(new_content2)
END

FUNCTION register_new_user(filename, usernames:list)
BEGIN
  username = ""
  password = ""

  DOWHILE username == "" or username IN usernames
    username = get_user_not_empty("Enter username: ")
    IF username == "" THEN
      DISPLAY "Username cannot be empty!\n"
    ELSE IF username IN usernames THEN
      DISPLAY "Username has been taken!\nPlease enter another username.\n"
    ENDIF
  ENDWHILES

  DOWHILE password == ""
    password = get_user_not_empty("Enter password: ")
    IF password == "" THEN
      DISPLAY "Password cannot be empty!\n"
    ENDIF
  ENDWHILE

  DISPLAY "Your username and password is ", username, password

  WITH open(filename, "a", encoding="utf-8") AS customer_file:
    customer_file.write(username + "\n" + password + "\n")

FUNCTION login(usernames, passwords)
BEGIN 
  DISPLAY "Please log in.\n"

  username = ""
  username_idx = 0

  DOWHILE username NOT IN usernames
    username = get_user_not_empty("Username: ")
    IF username NOT IN usernames THEN
      DISPLAY "Username NOT found\nPlease try again\n"
    ELSE
      username_idx = usernames.index(username)

  password = ""

  DOWHILE password != passwords[username_idx]
    password = get_user_not_empty("Password: ")
    IF password != passwords[username_idx] THEN
      DISPLAY "Password incorrect\nPlease try again\n"
    ENDIF

  DISPLAY "Logged in!\n"
  DISPLAY "Press enter to continue..."
  READ input
  os.system("cls")
  RETURN username_idx
  ENDWHILE

FUNCTION add_new_car()
BEGIN
  car_details, _ = get_file_info(CARS_FILE)

  comp
  car_details = [c.split("|") FOR c IN car_details]
  used_car_names = [c[0].lower()+c[1].lower() FOR c IN car_details]

  car_detail = ""
  car_name = ""

  brand = ""
  model = ""
  description = ""

  DOWHILE car_detail == "" or car_name IN used_car_names

    brand = get_user_not_empty("Enter brand: ", "Brand cannot be empty!\n")
    model = get_user_not_empty("Enter model: ", "Model cannot be empty!\n")
    description = get_user_not_empty("Enter description:  ", "Description cannot be empty!\n")
    amount = get_user_int("Enter amount of cars to add: ")

    car_detail = brand + "|" + model + "|" + description + "|" + amount + "\n"
    car_name = brand.lower() + model.lower()

    IF car_name IN used_car_names THEN
      DISPLAY "The car name has been taken!\nPlease create a unique one.\n"
    ENDIF
  ENDWHILE

  hourly_price = get_user_float("Enter hourly price: ")
  daily_price = get_user_float("Enter daily price: ")
  price_detail = hourly_price, + "|" + daily_price + "\n"

  DISPLAY "Your car name is: ", brand, model
  DISPLAY "Your car description is: ", description
  DISPLAY "The hourly price is: ", hourly_price + "\n" + "The daily price is: ", daily_price

  add_file_info(CARS_FILE, car_detail, price_detail)
END

FUNCTION modify_car_details()
BEGIN
  cars, prices = get_file_info(CARS_FILE)

  car_details = []
  price_details = []

  LOOP i FROM 0 TO len(cars)
    car_details.append(cars[i].split("|"))
    price_details.append(prices[i].split("|"))
  ENDLOOP

  view_cars(False, False)
  car_idx = get_user_int_range("Choose a car index to edit: ", 1, len(car_details)) - 1

  DISPLAY "\nWhich car detail you want to modify?"
  DISPLAY("\n1. Car Detail\n2. Price Detail")
  choose_detail = get_user_int_range("\nEnter (1/2): ", 1, 2)

  IF choose_detail == 1 THEN

    DISPLAY "\nChoose car detail to be modified:"
    DISPLAY"\n1. Brand\n2. Model\n3. Description\n4. Cars Remaining"
    detail_idx = get_user_int_range("\nChoose car detail (1-4): ", 1, 4) - 1

    IF detail_idx != 3 THEN
      new_info = get_user_not_empty("\nEnter new car detail: ", "Nothing is entered. Please try again!\n")
    ELSE
      new_info = get_user_int("\nEnter new car remaining: ")
    ENDIF

    car_details[car_idx][detail_idx] = str(new_info)
    modification = car_details[car_idx]
    modification = join_util(modification, "|")

    modify_file_info(CARS_FILE, car_idx, True, modification)

  ELSE
    DISPLAY "\nWhich price detail you want to modify?"
    DISPLAY "\n1. Hourly Price\n2. Daily Price"
    detail_idx = get_user_int_range("\nChoose price detail(1/2): ", 1, 2) - 1
    new_info = get_user_float("\nEnter new car rent price: ")

    price_details[car_idx][detail_idx] = str(new_info)
    modification = price_details[car_idx]
    modification = join_util(modification, "|")

    modify_file_info(CARS_FILE, car_idx, False, modification)
  ENDIF
END

FUNCTION display_records()
BEGIN
  car_indices, dates = get_file_info(CUSTOMER_RENTS_FILE)
  comp
  car_indices = [idx.split("|") FOR idx IN car_indices]
  dates = [date.split("|") FOR date IN dates]

  car_details, price_details = get_file_info(CARS_FILE)
  comp
  car_details = [detail.split("|") FOR detail IN car_details]
  price_details = [detail.split("|") FOR detail IN price_details]

  usernames, _ = get_file_info(CUSTOMERS_FILE)

  DISPLAY "\nRented cars:"

  LOOP customer_idx FROM 0 TO len(car_indices)
    date_details = dates[customer_idx]
    indices_details = car_indices[customer_idx]
    IF len(indices_details) <= 0 THEN continue
    ENDIF

    DISPLAY "\nCars rented by: ", usernames[customer_idx] + "\n"
    rent_idx = 0

    LOOP history_idx FROM 0 TO len(indices_details)
      IF date_details[history_idx] != "-" THEN
        rent_idx += 1
        rent_idx_str = rent_idx + "."
        rent_details = indices_details[history_idx].split(",")
        rent_car_date = date_details[history_idx].split(",")
        comp
        rent_car_date = [int(d) FOR d IN rent_car_date]

        rent_car_date = datetime.datetime(

          rent_car_date[0], rent_car_date[1],
          rent_car_date[2], rent_car_date[3],
          rent_car_date[4], rent_car_date[5]
        )
        rent_car_details = car_details[int(rent_details[0])]
        DISPLAY rent_idx_str + "Car:" + rent_car_details[0], rent_car_details[1]
        DISPLAY " "*len(rent_idx_str) + "Rented on:" + rent_car_date
        IF rent_details[2] == "D" then
          DISPLAY "Rented for: " + rent_details[1] + "day(s)"
        ELSE
          DISPLAY "Rented for: " + rent_details[1] + "hour(s)"
        ENDIF

        IF int(rent_details[3]) == 1 THEN
          DISPLAY "Status: Returned"
        ELSE
          DISPLAY "Status: Not returned"
        ENDIF
      ENDIF
    ENDLOOP
  ENDLOOP

  DISPLAY "Booked cars:"
  LOOP customer_idx FROM 0 TO len(car_indices)
    date_details = dates[customer_idx]
    indices_details = car_indices[customer_idx]

    DISPLAY "\nCars booked by:" + usernames[customer_idx] + "\n"
    rent_idx = 0
    LOOP history_idx FROM 0 TO len(indices_details)
      IF date_details[history_idx] == "-" THEN
        rent_idx += 1
        rent_idx_str = rent_idx + ". "
        rent_details = indices_details[history_idx].split(",")
        rent_car_details = car_details[int(rent_details[0])]
        DISPLAY rent_idx_str + "Car:" + rent_car_details[0], rent_car_details[1]
      ENDIF
    ENDLOOP
  ENDLOOP
  DISPLAY "Cars available FOR rent:\n"
  view_cars(True, True)
END

FUNCTION search_records()
BEGIN
  car_indices, dates = get_file_info(CUSTOMER_RENTS_FILE)
  customer_names, _ = get_file_info(CUSTOMERS_FILE)
  car_details, _ = get_file_info(CARS_FILE)

  comp
  car_indices = [c.split("|") FOR c IN car_indices]
  dates = [d.split("|") FOR d IN dates]
  car_details = [c.split("|") FOR c IN car_details]

  LOOP i FROM 0 TO len(customer_names)
    DISPLAY i+1 + "." customer_names[i]
  ENDLOOP
  customer_idx = get_user_int_range(f"\nChoose a customer to be searched (1-{len(customer_names)}): ", 1, len(customer_names)) - 1

  DISPLAY "\nChoose your option below:"
  DISPLAY "1. Customer booking\n2. Customer payment"
  option = get_user_int_range("\nEnter option (1/2): ", 1, 2) 

  IF option == 1 THEN
    DISPLAY "\nCars booked by:" + customer_names[customer_idx] + "\n"
    date_details = dates[customer_idx]
    indices_details = car_indices[customer_idx]

    book_idx = 0
    LOOP history_idx FROM 0 TO len(indices_details)
      IF date_details[history_idx] == "-" THEN
        book_idx += 1
        rent_idx_str = book_idx + "."
        rent_details = indices_details[history_idx].split(",")
        rent_car_details = car_details[int(rent_details[0])]

        DISPLAY rent_idx_str, "Car:", rent_car_details[0], rent_car_details[1]



  ELSE

    # do customer payment

    # name IN customer_names[i] == car_info[i]

    DISPLAY(f"\nCars rent by: {customer_names[customer_idx]}\n")

    date_details = dates[customer_idx]

    indices_details = car_indices[customer_idx]



    book_idx = 0

    FOR history_idx IN range(len(indices_details)):

      IF date_details[history_idx] != "-":

        book_idx += 1

        rent_idx_str = f"{book_idx}. "

        rent_details = indices_details[history_idx].split(",")

        rent_car_details = car_details[int(rent_details[0])]

        rent_car_date = date_details[history_idx].split(",")

        # convert all string elements from string to integer

        rent_car_date = [int(d) FOR d IN rent_car_date]

        # create readable datetime format

        rent_car_date = datetime.datetime(

          rent_car_date[0], rent_car_date[1],

          rent_car_date[2], rent_car_date[3],

          rent_car_date[4], rent_car_date[5]

        )

        DISPLAY(f"{rent_idx_str}Car: {rent_car_details[0]}, {rent_car_details[1]}")

        DISPLAY(" "*len(rent_idx_str) + f"Rented on: {rent_car_date}")

        IF rent_details[2] == "D":

          DISPLAY(" "*len(rent_idx_str) + f"Rented for: {rent_details[1]} day(s)")

        ELSE

          DISPLAY(" "*len(rent_idx_str) + f"Rented for: {rent_details[1]} hour(s)")



FUNCTION RETURN_rented_cars():

  car_indices, dates = get_file_info(CUSTOMER_RENTS_FILE)

  car_indices = [idx.split("|") FOR idx IN car_indices]

  dates = [date.split("|") FOR date IN dates]



  car_details, price_details = get_file_info(CARS_FILE)

  car_details = [detail.split("|") FOR detail IN car_details]

  price_details = [detail.split("|") FOR detail IN price_details]



  usernames, _ = get_file_info(CUSTOMERS_FILE)



  DISPLAY("")

  FOR i IN range(len(usernames)):

    DISPLAY(f"{i+1}. {usernames[i]}")



  customer_idx = get_user_int_range(f"Select a customer (1-{len(usernames)}): ", 1, len(usernames)) - 1



  # show unRETURNed cars START

  date_details = dates[customer_idx]

  indices_details = car_indices[customer_idx]

  unRETURNed_history_indices = []

  unRETURNed_car_indices = []

  unRETURNed_car_dates = []

  FOR history_idx IN range(len(indices_details)):

    IF date_details[history_idx] != "-":

      rent_details = indices_details[history_idx].split(",")

      rent_car_date = date_details[history_idx].split(",")

      # convert all string elements from string to integer

      rent_car_date = [int(d) FOR d IN rent_car_date]

      # create readable datetime format

      rent_car_date = datetime.datetime(

        rent_car_date[0], rent_car_date[1],

        rent_car_date[2], rent_car_date[3],

        rent_car_date[4], rent_car_date[5]

      )

      IF rent_details[3] != "1":

        # store history index, car index and rent date

        unRETURNed_history_indices.append(history_idx)

        unRETURNed_car_indices.append(int(rent_details[0]))

        unRETURNed_car_dates.append(str(rent_car_date))



  IF len(unRETURNed_history_indices) > 0:

    DISPLAY(f"\nCars that are NOT RETURNed by: {usernames[customer_idx]}")

    FOR i IN range(len(unRETURNed_car_indices)):

      unRETURNed_car_detail = car_details[unRETURNed_car_indices[i]]

      DISPLAY(f"{i+1}. {unRETURNed_car_detail[0]}, {unRETURNed_car_detail[1]}")

      DISPLAY(" "*len(f"{i+1}. ") + f"Rented on: {unRETURNed_car_dates[i]}")



    RETURN_car_idx = get_user_int_range(f"\nChoose a car to RETURN (1-{len(unRETURNed_history_indices)}): ", 1, len(unRETURNed_history_indices)) - 1

    # RETURN the car by setting the last value IN rent_details to "1"

    rent_details = indices_details[unRETURNed_history_indices[RETURN_car_idx]].split(",")

    rent_details[3] = "1"

    indices_details[unRETURNed_history_indices[RETURN_car_idx]] = join_util(rent_details, ",")



    modify_file_info(CUSTOMER_RENTS_FILE, customer_idx, True, join_util(indices_details, "|"))



  ELSE

    DISPLAY(f"There are no cars to RETURN from {usernames[customer_idx]}.")



  READ("Car RETURNed, press enter to continue...")

  # show unRETURNed cars END



# MAIN FUNCTION

FUNCTION admin():

  os.system("cls")

  admin_list = [

    "ADMIN",

    "\n1. Add a new car.",

    "2. Modify car details.",

    "3. Display records",

    "4. Search specific records",

    "5. Return a rented car.",

    "6. Return to main menu.\n"

  ]

  admin_func = [add_new_car, modify_car_details, display_records, search_records, RETURN_rented_cars]



  usernames, passwords = get_file_info(ADMINS_FILE)

  login(usernames, passwords)

  DOWHILE True:

    os.system("cls")

    FOR i IN range(len(admin_list)):

      DISPLAY(admin_list[i])

    no = get_user_int_range("Choose option (1-6): ", 1, 6)

    IF no == 6: RETURN

    admin_func[no-1]()

# endregion ========================================



# region ALL CUSTOMERS MENU ========================

FUNCTION create_acc():

  usernames, _ = get_file_info(CUSTOMERS_FILE)

  register_new_user(CUSTOMERS_FILE, usernames)

  add_file_info(CUSTOMER_RENTS_FILE, "\n", "\n")



FUNCTION view_cars(view_available:bool=True, wait=True) -> list:

  cars, price = get_file_info(CARS_FILE)

  available_car_indices = []

  FOR i IN range(len(cars)):

    car_detail = cars[i].split("|")

    price_detail = price[i].split("|")

    IF view_available and int(car_detail[3]) <= 0: continue

    available_car_indices.append(i)

    DISPLAY(f"Car Index: {i+1}")

    DISPLAY(f"Car: {car_detail[0]}, {car_detail[1]}")

    DISPLAY(f"Description: {car_detail[2]}")

    DISPLAY(f"Cars Remaining: {car_detail[3]}")

    DISPLAY(f"Hourly Price: {price_detail[0]}")

    DISPLAY(f"Daily Price: {price_detail[1]}\n")



  IF wait: READ("Press enter to continue...")

  RETURN available_car_indices



# MAIN FUNCTION

FUNCTION all_customer():

  os.system("cls")

  customer_list = [

    "ALL CUSTOMER",

    "\n1. View all cars available FOR rent.",

    "2. Create new account.",

    "3. Exit to main menu\n"

  ]

  customer_func = [view_cars, create_acc]



  DOWHILE True:

    os.system("cls")

    FOR i IN range(len(customer_list)):

      DISPLAY(customer_list[i])

    no = get_user_int_range("Choose option (1-3): ", 1, 3)

    IF no == 3: RETURN

    customer_func[no-1]()

# endregion ========================================



# region REGISTERED CUSTOMER MENU ==================

FUNCTION modify_personal_details(curr_user_idx:int) -> None:

  DISPLAY("\n1. Username\n2. Password\n3. Cancel")

  selection = get_user_int_range("Choose option (1-3): ", 1, 3, "Select 1 or 2 only!\n")

  IF selection == 3: RETURN



  IF selection == 1:

    new_username = get_user_not_empty("New username: ")

    modify_file_info(CUSTOMERS_FILE, curr_user_idx, True, new_username)

  ELSE

    new_password = get_user_not_empty("New password: ")

    modify_file_info(CUSTOMERS_FILE, curr_user_idx, False, new_password)



FUNCTION view_history(curr_user_idx:int) -> None:

  car_indices, dates = get_file_info(CUSTOMER_RENTS_FILE)

  car_indices = [idx.split("|") FOR idx IN car_indices]

  dates = [date.split("|") FOR date IN dates]



  car_details, price_details = get_file_info(CARS_FILE)

  car_details = [detail.split("|") FOR detail IN car_details]

  price_details = [detail.split("|") FOR detail IN price_details]



  DISPLAY("\nRented cars:\n")

  rented_cars = []



  date_details = dates[curr_user_idx]

  indices_details = car_indices[curr_user_idx]



  rent_idx = 0

  FOR i IN range(len(date_details)):

    IF date_details[i] != "-":

      rent_idx += 1

      rent_idx_str = f"{rent_idx}. "

      rent_details = indices_details[i].split(",")

      rent_car_date = date_details[i].split(",")

      # convert all string elements from string to integer

      rent_car_date = [int(d) FOR d IN rent_car_date]

      # create readable datetime format

      rent_car_date = datetime.datetime(

        rent_car_date[0], rent_car_date[1],

        rent_car_date[2], rent_car_date[3],

        rent_car_date[4], rent_car_date[5]

      )

      rent_car_details = car_details[int(rent_details[0])]

      DISPLAY(f"{rent_idx_str}Car: {rent_car_details[0]}, {rent_car_details[1]}")

      DISPLAY(" "*len(rent_idx_str) + f"Rented on: {rent_car_date}")

      DISPLAY(" "*len(rent_idx_str) + f"Status: {'Returned' IF int(rent_details[3]) else 'Not RETURNed'}")



  READ("Press enter to continue...")



FUNCTION view_booked_cars(curr_user_idx:int) -> None:

  car_indices, dates = get_file_info(CUSTOMER_RENTS_FILE)

  car_indices = [idx.split("|") FOR idx IN car_indices]

  dates = [date.split("|") FOR date IN dates]



  car_details, price_details = get_file_info(CARS_FILE)

  car_details = [detail.split("|") FOR detail IN car_details]

  price_details = [detail.split("|") FOR detail IN price_details]



  DISPLAY("\nCars to be rented:\n")

  rented_cars = []



  date_details = dates[curr_user_idx]

  indices_details = car_indices[curr_user_idx]



  FOR i IN range(len(date_details)):

    IF date_details[i] == "-":

      rent_details = indices_details[i].split(",")

      rent_car_details = car_details[int(rent_details[0])]

      rent_car_price = price_details[int(rent_details[0])]

      DISPLAY(f"Car: {rent_car_details[0]}, {rent_car_details[1]}")

      DISPLAY(f"Description: {rent_car_details[2]}")

      IF rent_details[2] == "H":

        DISPLAY(f"Booked FOR {rent_details[1]} hours.")

        total_price = float(rent_car_price[0])*int(rent_details[1])

      ELSE

        DISPLAY(f"Booked FOR {rent_details[1]} days.")

        total_price = float(rent_car_price[1])*int(rent_details[1])

      DISPLAY(f"Total Price: RM {total_price}\n")



  READ("Press enter to continue...")



FUNCTION book_cars(curr_user_idx:int) -> None:

  # decrease cars remaning by 1 START

  car_details, price_details = get_file_info(CARS_FILE)

  car_details = [detail.split("|") FOR detail IN car_details]

  price_details = [detail.split("|") FOR detail IN price_details]



  available_car_indices = view_cars(True, False)

  available_car_indices = [str(idx+1) FOR idx IN available_car_indices]

  car_idx = get_user_selection("\nSelect car index: ", available_car_indices, "Car index is NOT available FOR rent!\n")

  car_idx = int(car_idx) - 1



  car_details[car_idx][3] = str(int(car_details[car_idx][3]) - 1)

  modify_file_info(CARS_FILE, car_idx, True, join_util(car_details[car_idx], "|"))

  # decrease car remaining by 1 END



  # car_indices: car_idx,duration,D/H|car_idx,duration,D/H|car_idx,duration,D/H

  # dates      : date|date|date



  # ask how long does the customer wants to rent the car START

  DISPLAY("\nDo you want to rent the car IN days or hours? Select '1' FOR days and '2' FOR hours")

  selection = get_user_int_range("\nChoose option (1/2): ", 1, 2)

  booking_result = ""

  IF selection == 1:

    duration = get_user_int("How many days do you want to rent the car: ")

    booking_result = f"{car_idx},{duration},D,0"

  ELSE

    duration = get_user_int("How many hours do you want to rent the car: ")

    booking_result = f"{car_idx},{duration},H,0"

  # ask how long does the customer wants to rent the car END



  # append new car index and allocate a new date IN customer_rents.txt START

  car_indices, dates = get_file_info(CUSTOMER_RENTS_FILE)

  car_indices = [idx.split("|") FOR idx IN car_indices]

  dates = [date.split("|") FOR date IN dates]



  car_indices[curr_user_idx].append(booking_result)

  dates[curr_user_idx].append("-")



  new_car_indices = join_util(car_indices[curr_user_idx], "|")

  new_dates = join_util(dates[curr_user_idx], "|")



  modify_file_info(CUSTOMER_RENTS_FILE, curr_user_idx, True, new_car_indices)

  modify_file_info(CUSTOMER_RENTS_FILE, curr_user_idx, False, new_dates)

  # append new car index and allocate a new date IN customer_rents.txt END



FUNCTION payment(curr_user_idx:int) -> None:

  # check which booked cars are NOT payed yet START

  car_indices, dates = get_file_info(CUSTOMER_RENTS_FILE)

  car_indices = [idx.split("|") FOR idx IN car_indices]

  dates = [date.split("|") FOR date IN dates]



  unpaid_car_indices = []

  FOR i IN range(len(car_indices[curr_user_idx])):

    IF dates[curr_user_idx][i] == "-":

      unpaid_car_indices.append(i)

  # check which booked cars are NOT payed yet END



  car_details, price_details = get_file_info(CARS_FILE)

  car_details = [detail.split("|") FOR detail IN car_details]

  price_details = [detail.split("|") FOR detail IN price_details]



  # DISPLAY out details and show cars that the customer booked START

  total_price = 0

  DISPLAY("\nCars booked:\n")

  FOR idx IN unpaid_car_indices:

    rent_details = car_indices[curr_user_idx][idx].split(",")

    rent_car_details = car_details[int(rent_details[0])]

    rent_car_price = price_details[int(rent_details[0])]

    IF rent_details[2] == "H":

      rent_price= float(rent_car_price[0])*int(rent_details[1])

      DISPLAY(rent_car_details[0], rent_car_details[1], end=" ")

      DISPLAY(f"* {rent_details[1]} hours (RM {rent_price})")

      total_price += rent_price

    ELSE

      rent_price = float(rent_car_price[1])*int(rent_details[1])

      DISPLAY(rent_car_details[0], rent_car_details[1], end=" ")

      DISPLAY(f"* {rent_details[1]} days (RM {rent_price})")

      total_price += rent_price

      

  DISPLAY(f"The total price is: RM {total_price}\n")

  # DISPLAY out details and show cars that the customer booked END



  DISPLAY("Type '1' to pay, '2' to cancel payment.")

  pay = get_user_int_range("Choose option (1/2): ", 1, 2)

  IF pay == 1:

    # replace "-" IN dates WITH actual dates to mark it AS paid START

    # get current time

    current_time = datetime.datetime.now().strftime("%Y,%m,%d,%H,%M,%S")

    FOR idx IN unpaid_car_indices:

      dates[curr_user_idx][idx] = current_time

    # replace "-" IN dates WITH actual dates to mark it AS paid END



    # write car_indices and dates back into the file START

    modify_file_info(CUSTOMER_RENTS_FILE, curr_user_idx, False, join_util(dates[curr_user_idx], "|"))

    # write car_indices and dates back into the file END



FUNCTION delete_account(curr_user_idx:int) -> bool:

  decision = ""

  decision = get_user_selection("Are you sure? y/n: ", ["y", "n"])



  IF decision == "y":

    delete_file_info(CUSTOMERS_FILE, curr_user_idx)

    delete_file_info(CUSTOMER_RENTS_FILE, curr_user_idx)

    RETURN True



  RETURN False



# MAIN FUNCTION

FUNCTION registered_customer() -> None:

  os.system("cls")

  registered_customer_list = [

    "REGISTERED CUSTOMER",

    "\n1. Modify personal details.",

    "2. View personal rental history.",

    "3. View details of cars to be rented out.",

    "4. Select and book a car FOR a specific duration.",

    "5. Do payment to confirm Booking.",

    "6. Delete account.",

    "7. Exit to main menu\n"

  ]

  registered_customer_func = [modify_personal_details, view_history, view_booked_cars, book_cars, payment, delete_account]



  usernames, passwords = get_file_info(CUSTOMERS_FILE)

  curr_user_idx = login(usernames, passwords)

  in_loop = True

  DOWHILE in_loop:

    os.system("cls")

    FOR i IN range(len(registered_customer_list)):

      DISPLAY(registered_customer_list[i])

    no = get_user_int("Choose option (1-7): ")

    IF no == 7: RETURN

    in_loop = NOT registered_customer_func[no-1](curr_user_idx)

# endregion ========================================



# region MAIN PROGRAM ==============================

FUNCTION exit_program() -> None:

  DISPLAY("\nDo you want to continue? To exit to the Main Menu type '1', To Terminate Program type '2': ")

  no = get_user_int_range("Choose option (1/2): ", 1, 2)

  IF no == 2: exit()



FUNCTION main() -> None:

  user_func = [admin, all_customer, registered_customer]



  user_type_list = [

    "MAIN MENU",

    "1. Admin",

    "2. All Customers (Registered / Not-Registered)",

    "3. Registered Customer",

    "4. Exit Program\n"

  ]



  DOWHILE True:

    os.system("cls")

    DISPLAY("Welcome to SUPER CAR RENTAL SERVICES!!!\n")

    FOR i IN range(len(user_type_list)):

      DISPLAY(user_type_list[i])



    no = get_user_int_range("Choose user(1-4): ", 1, 4)

    IF no == 4: exit_program()

    ELSE user_func[no-1]()

# endregion ========================================



IMPORT datetime
IMPORT os

CUSTOMERS_FILE = "./customers.txt"
CUSTOMER_RENTS_FILE = "./customer_rents.txt"
CARS_FILE = "./cars.txt"
ADMINS_FILE = "./admins.txt"

main()



